---
description: 
globs: 
alwaysApply: true
---
# Pagez - React Native Book Platform Rules

## Project Context
React Native (Expo) book discovery platform with authentication, reading lists, and community features.

**Tech Stack**: React Native 0.79.1, Expo ^53.0.4, TypeScript ~5.8.3, Expo Router

## File Organization
```
my-app/
├── app/                    # Expo Router (file-based routing)
│   ├── (auth)/            # Auth group routes  
│   ├── author/            # Author features
│   ├── profile/           # User profiles
│   └── *.tsx              # Main app screens
├── src/
│   ├── assets/fonts/      # Bogart font family
│   ├── assets/images/     # PNG/SVG assets
│   ├── components/        # Reusable components
│   ├── constants/         # App constants
│   └── utils/             # Helper functions
```

## Naming Conventions
- **Components**: `BookCard.tsx`, `ReadingList.tsx` (PascalCase)
- **Routes**: `create-profile.tsx`, `book-details.tsx` (kebab-case)  
- **Utils**: `formatDate.ts`, `bookHelpers.ts` (camelCase)
- **Constants**: `COLORS.ts`, `API_ENDPOINTS.ts` (SCREAMING_SNAKE_CASE)

## Component Standards

### Required Structure
```typescript
import React from 'react';
import { View, Text, StyleSheet } from 'react-native';

interface Props {
  title: string;
  onPress?: () => void;
}

export const ComponentName: React.FC<Props> = ({ title, onPress }) => {
  return (
    <View style={styles.container}>
      <Text style={styles.title}>{title}</Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { /* styles */ },
  title: { /* styles */ },
});
```

### TypeScript Requirements
- ✅ Always use TypeScript interfaces
- ✅ Export types with components
- ❌ Never use `any` - use `unknown` instead
- ✅ Define props interfaces for all components

## Font Implementation

### Bogart Font Usage
Use exact font file names from `src/assets/fonts/`:
```typescript
// ✅ Correct
fontFamily: 'Bogart-Medium-trial'
fontFamily: 'Bogart-Semibold-trial'
fontFamily: 'Bogart-Bold-trial'

// ❌ Wrong  
fontFamily: 'Bogart Trial'
fontFamily: 'Bogart'
```

**Available fonts**: Regular, Medium, Semibold, Bold, Light, Thin, Black (all with -trial suffix)

## Styling Rules

### Style Organization
```typescript
const styles = StyleSheet.create({
  // Layout containers
  container: { flex: 1, backgroundColor: '#FCF3EC' },
  content: { paddingHorizontal: 30 },
  
  // Text elements
  title: { fontSize: 64, fontFamily: 'Bogart-Semibold-trial' },
  subtitle: { fontSize: 34, fontFamily: 'Bogart-Medium-trial' },
  
  // Interactive elements  
  button: { height: 55, borderRadius: 28 },
});
```

### Color Standards
- **Primary Orange**: `#EB4D2A`
- **Background Cream**: `#FCF3EC` 
- **Text Light**: `#FCF3EC` (on dark backgrounds)
- **Text Dark**: `#1E1E1E` (on light backgrounds)
- **Border Gray**: `#BBAEA8`

## Navigation Patterns

### Expo Router Usage
```typescript
import { router } from 'expo-router';

// Navigation
router.push('/book-details/123');
router.replace('/login');
router.back();

// Group routes: (auth), (tabs)
// Dynamic routes: [id].tsx, [...slug].tsx
```

### Route Structure
- `(auth)/` - Authentication screens
- `author/` - Author-specific features
- `profile/` - User profile management

## Image Assets

### Import Patterns
```typescript
// ✅ Relative paths for images
source={require('../../src/assets/images/onboarding/paper1.png')}

// ✅ SVG with react-native-svg
import { SvgXml } from 'react-native-svg';
```

### Onboarding Assets
- Use `Group_paper_up.png` and `Group paper_down.png` for decorative backgrounds
- Paper images: `paper1.png` through `paper9.png` available

## Development Workflow

### Terminal Commands
Always navigate to project directory first:
```bash
cd my-app
npx expo start
```

### State Management
- **Global**: React Context
- **Local**: useState hooks  
- **Shared Logic**: Custom hooks
- Keep state close to usage

### Performance
- Use `FlatList` for large data sets
- Implement `React.memo` for expensive components
- Optimize images with proper sizing
- Clean up subscriptions in `useEffect`

## Data Structures

### Core Interfaces
```typescript
interface Book {
  id: string;
  title: string;
  author: string;
  coverUrl: string;
  genres: string[];
  rating: number;
}

interface User {
  id: string;
  email: string;
  displayName: string;
  username: string;
  isAuthor: boolean;
}
```

## Error Handling

### TypeScript Config
- Set `moduleResolution: "node"` (not bundler)
- Avoid `customConditions` errors
- Use relative imports for assets

### Common Fixes
- Font issues: Use exact font file names
- Import errors: Use relative paths `../../src/`
- Route errors: Check file-based routing structure

## Design System

### Text Styling Examples
```typescript
// Welcome screen text
welcomeGreeting: {
  fontSize: 34,
  fontFamily: 'Bogart-Medium-trial',
  color: '#FCF3EC',
  letterSpacing: -0.68,
}

welcomeTitle: {
  fontSize: 64, 
  fontFamily: 'Bogart-Semibold-trial',
  color: '#FCF3EC',
  letterSpacing: -1.28,
}
```

### Layout Patterns
- Use `SafeAreaView` for screen containers
- Center content with `justifyContent: 'center'`
- Consistent padding: `paddingHorizontal: 30`
- Button height: `55px` with `borderRadius: 28`

## Testing & Quality

### Pre-commit Checklist
- [ ] TypeScript errors resolved
- [ ] Proper font family names used
- [ ] Relative paths for imports
- [ ] Consistent naming conventions
- [ ] Styles use StyleSheet.create()

### Build Verification
- [ ] `npx expo start` runs successfully
- [ ] No import/require errors
- [ ] Fonts render correctly
- [ ] Navigation works as expected
