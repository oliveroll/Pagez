# Pagez - React Native (Expo) Book Discovery Platform

## Project Overview
Pagez is a comprehensive book discovery and reading platform built with React Native and Expo. It combines social reading features with author tools and immersive reading experiences.

### Core Features
- User authentication (Email/Password, Google, Apple)
- Book discovery feed with trending/recommended books
- Reading list management system
- Immersive embedded reader with highlighting
- Community posts and interactions
- Author dashboard for book management
- Author notes system

## Tech Stack & Dependencies

### Primary Technologies
- **React Native**: 0.79.1
- **Expo**: ^53.0.4 with Expo Router for navigation
- **TypeScript**: ~5.8.3
- **React**: 19.0.0

### Key Libraries
- **Navigation**: @react-navigation/native, expo-router
- **UI/UX**: react-native-reanimated, react-native-gesture-handler, expo-linear-gradient
- **Icons**: @expo/vector-icons, react-native-vector-icons
- **Authentication**: expo-auth-session, expo-web-browser
- **Media**: expo-image-picker, react-native-svg
- **Utilities**: expo-constants, expo-linking, expo-random

## Project Structure

```
my-app/
├── app/                          # Expo Router file-based routing
│   ├── (auth)/                   # Auth group routes
│   ├── author/                   # Author-specific routes
│   │   └── notes/               # Author notes management
│   ├── profile/                 # User profile routes
│   │   └── create-author/       # Author onboarding
│   ├── search/                  # Search functionality
│   ├── _layout.tsx             # Root layout component
│   ├── index.tsx               # Entry point
│   ├── setup.tsx               # User setup/onboarding
│   ├── onboarding.tsx          # App onboarding
│   ├── home.tsx                # Home/discovery feed
│   ├── library.tsx             # User's reading lists
│   ├── community.tsx           # Community posts feed
│   └── book-more.tsx           # Book details view
├── src/
│   ├── assets/                 # Static assets
│   │   ├── fonts/             # Custom fonts
│   │   └── images/            # Images and icons
│   ├── components/            # Reusable React components
│   │   └── filters/           # Filter-related components
│   ├── constants/             # App constants and configurations
│   ├── context/               # React Context providers
│   └── utils/                 # Utility functions and helpers
├── package.json               # Dependencies and scripts
├── app.json                   # Expo configuration
├── tsconfig.json             # TypeScript configuration
└── README.md                 # Project documentation
```

## Coding Standards & Conventions

### File Naming
- **Components**: PascalCase (e.g., `BookCard.tsx`, `ReadingList.tsx`)
- **Pages/Routes**: kebab-case (e.g., `book-details.tsx`, `create-author.tsx`)
- **Utilities**: camelCase (e.g., `formatDate.ts`, `bookHelpers.ts`)
- **Constants**: SCREAMING_SNAKE_CASE (e.g., `API_ENDPOINTS.ts`, `COLORS.ts`)

### TypeScript Guidelines
- Always use TypeScript for type safety
- Define interfaces for all data structures
- Use proper typing for React components and props
- Avoid `any` type - use specific types or `unknown`
- Export types alongside components when needed

### Component Structure
```typescript
// Component imports
import React from 'react';
import { View, Text, StyleSheet } from 'react-native';

// Type imports
import type { ComponentProps } from './types';

// Component definition
interface Props {
  title: string;
  onPress?: () => void;
}

export const ComponentName: React.FC<Props> = ({ title, onPress }) => {
  return (
    <View style={styles.container}>
      <Text style={styles.title}>{title}</Text>
    </View>
  );
};

// Styles at bottom
const styles = StyleSheet.create({
  container: {
    // styles
  },
  title: {
    // styles
  },
});
```

### State Management
- Use React Context for global state
- useState for local component state
- Custom hooks for shared logic
- Keep state as close to where it's used as possible

### Styling Guidelines
- Use StyleSheet.create() for all styles
- Follow consistent naming: container, wrapper, content, title, subtitle, etc.
- Use theme colors from constants
- Responsive design considerations for different screen sizes
- Consistent spacing and typography scale

## Expo Router Conventions

### Route Organization
- Use file-based routing with Expo Router
- Group related routes in folders
- Use `(auth)` for authentication-related routes (group routes)
- Use `_layout.tsx` for shared layouts
- Dynamic routes: `[id].tsx` or `[...slug].tsx`

### Navigation Patterns
```typescript
import { router } from 'expo-router';

// Navigate to a route
router.push('/book-details/123');

// Replace current route
router.replace('/login');

// Go back
router.back();
```

## Data & API Integration

### Mock Data Structure
Since this is frontend-only, use comprehensive mock data:

```typescript
// Book interface
interface Book {
  id: string;
  title: string;
  author: string;
  coverUrl: string;
  description: string;
  isbn?: string;
  publishedDate: string;
  genres: string[];
  rating: number;
  totalRatings: number;
}

// User interface
interface User {
  id: string;
  email: string;
  displayName: string;
  username: string;
  profilePicture?: string;
  isAuthor: boolean;
  createdAt: string;
}

// Reading List interface
interface ReadingList {
  id: string;
  userId: string;
  name: string;
  description?: string;
  books: Book[];
  isPublic: boolean;
  createdAt: string;
  updatedAt: string;
}
```

### Firebase Integration Planning
Document Firebase structure for backend implementation:
- Authentication: Email/Password, Google, Apple
- Firestore Collections: users, books, readingLists, posts, comments, highlights
- Storage: User profile pictures, book covers, post images

## Feature Implementation Guidelines

### Authentication Flow
1. Splash screen with app branding
2. Onboarding screens (3-4 slides)
3. Sign up/Sign in options
4. Profile setup (picture, display name, username)
5. Optional author account creation

### Book Discovery
- Trending books feed
- Personalized recommendations
- Search functionality (title, author, genre)
- Book details with community features
- Add to reading lists functionality

### Reading Experience
- Embedded reader component
- Text highlighting with color options
- Quote sharing functionality
- Reading progress tracking
- Bookmark system

### Community Features
- Post creation (text + optional image)
- Book-linked posts
- Like and comment system
- User profiles with reading activity
- Following/follower system (future enhancement)

### Author Tools
- Book management dashboard
- Add/edit book information
- Author notes creation and management
- Analytics dashboard (basic stats)

## Performance Considerations

### Optimization Strategies
- Use FlatList for large data sets
- Implement image lazy loading
- Use React.memo for expensive components
- Optimize re-renders with proper dependency arrays
- Use Expo's built-in performance monitoring

### Memory Management
- Properly dispose of listeners
- Clean up subscriptions in useEffect
- Optimize image sizes and formats
- Use caching strategies for frequently accessed data

## Testing Strategy

### Component Testing
- Unit tests for utility functions
- Component testing with React Native Testing Library
- Mock external dependencies
- Test user interactions and navigation

### Integration Testing
- Test complete user flows
- Authentication flow testing
- Navigation testing
- API integration testing (when backend is ready)

## Development Workflow

### Git Conventions
- Feature branches: `feature/book-discovery`
- Bug fixes: `fix/authentication-issue`
- Hotfixes: `hotfix/critical-bug`
- Commit messages: Conventional Commits format

### Code Review Process
1. Self-review before creating PR
2. Ensure all tests pass
3. Check for TypeScript errors
4. Verify mobile responsiveness
5. Test on both iOS and Android simulators

## Deployment & Build

### Expo Configuration
- Development builds for testing
- Preview builds for stakeholder review
- Production builds for app stores
- Over-the-air updates for minor changes

### Environment Management
- Development environment setup
- Staging environment for testing
- Production environment configuration
- Environment-specific constants

## Future Enhancements

### Planned Features
- Push notifications for community interactions
- Offline reading capability
- Advanced search filters
- Book recommendations AI
- Social features expansion
- Web platform development

### Technical Debt Considerations
- Regular dependency updates
- Performance optimization reviews
- Code refactoring for maintainability
- Documentation updates
- Security audit considerations

## Resources & Documentation

### Key Documentation Links
- [Expo Documentation](https://docs.expo.dev/)
- [React Native Documentation](https://reactnative.dev/docs/getting-started)
- [Expo Router Documentation](https://expo.github.io/router/docs/)
- [React Navigation](https://reactnavigation.org/docs/getting-started)

### Design System
- Follow Material Design 3 principles for Android
- Follow Human Interface Guidelines for iOS
- Consistent color palette and typography
- Accessible design practices
- Dark mode support (future enhancement)

## Contact & Support
- Project Lead: [Contact Information]
- Technical Documentation: [Google Document Link]
- Repository: [GitHub Repository Link]
- Issue Tracking: [Issue Tracker Link] 